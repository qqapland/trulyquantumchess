@Master['Master.sshtml']

@Section['Head']
	<script>
		var gameId = "@Model.GameId";
		var pieces_collection = "@Model.PiecesCollection";
		var pieces_width_ratios = {
			pawn: @Model.PawnWidthRatio,
			knight: @Model.KnightWidthRatio,
			bishop: @Model.BishopWidthRatio,
			rook: @Model.RookWidthRatio,
			queen: @Model.QueenWidthRatio,
			king: @Model.KingWidthRatio
		};
	</script>
	<script src="@Model.Prefix/content/play.js"></script>
@EndSection

@Section['Body']
	<div class="chessboard-container" align="center">
		<div id="new_game" hidden="true">
			<a href="@Model.Prefix/" class="btn btn-default">New game</a>
		</div>
		<span id="error_message" class="red"></span>
		<br>
		<table class="chessboard">
			<tr>
				<td class="coord"></td>
				<td class="coord">a</td>
				<td class="coord">b</td>
				<td class="coord">c</td>
				<td class="coord">d</td>
				<td class="coord">e</td>
				<td class="coord">f</td>
				<td class="coord">g</td>
				<td class="coord">h</td>
				<td class="coord"></td>
			</tr>
			<tr>
				<td class="coord">8</td>
				<td> <canvas id="sq-a8" class="square-white"></canvas> </td>
				<td> <canvas id="sq-b8" class="square-black"></canvas> </td>
				<td> <canvas id="sq-c8" class="square-white"></canvas> </td>
				<td> <canvas id="sq-d8" class="square-black"></canvas> </td>
				<td> <canvas id="sq-e8" class="square-white"></canvas> </td>
				<td> <canvas id="sq-f8" class="square-black"></canvas> </td>
				<td> <canvas id="sq-g8" class="square-white"></canvas> </td>
				<td> <canvas id="sq-h8" class="square-black"></canvas> </td>
				<td class="coord">8</td>
			</tr>
			<tr>
				<td class="coord">7</td>
				<td> <canvas id="sq-a7" class="square-black"></canvas> </td>
				<td> <canvas id="sq-b7" class="square-white"></canvas> </td>
				<td> <canvas id="sq-c7" class="square-black"></canvas> </td>
				<td> <canvas id="sq-d7" class="square-white"></canvas> </td>
				<td> <canvas id="sq-e7" class="square-black"></canvas> </td>
				<td> <canvas id="sq-f7" class="square-white"></canvas> </td>
				<td> <canvas id="sq-g7" class="square-black"></canvas> </td>
				<td> <canvas id="sq-h7" class="square-white"></canvas> </td>
				<td class="coord">7</td>
			</tr>
			<tr>
				<td class="coord">6</td>
				<td> <canvas id="sq-a6" class="square-white"></canvas> </td>
				<td> <canvas id="sq-b6" class="square-black"></canvas> </td>
				<td> <canvas id="sq-c6" class="square-white"></canvas> </td>
				<td> <canvas id="sq-d6" class="square-black"></canvas> </td>
				<td> <canvas id="sq-e6" class="square-white"></canvas> </td>
				<td> <canvas id="sq-f6" class="square-black"></canvas> </td>
				<td> <canvas id="sq-g6" class="square-white"></canvas> </td>
				<td> <canvas id="sq-h6" class="square-black"></canvas> </td>
				<td class="coord">6</td>
			</tr>
			<tr>
				<td class="coord">5</td>
				<td> <canvas id="sq-a5" class="square-black"></canvas> </td>
				<td> <canvas id="sq-b5" class="square-white"></canvas> </td>
				<td> <canvas id="sq-c5" class="square-black"></canvas> </td>
				<td> <canvas id="sq-d5" class="square-white"></canvas> </td>
				<td> <canvas id="sq-e5" class="square-black"></canvas> </td>
				<td> <canvas id="sq-f5" class="square-white"></canvas> </td>
				<td> <canvas id="sq-g5" class="square-black"></canvas> </td>
				<td> <canvas id="sq-h5" class="square-white"></canvas> </td>
				<td class="coord">5</td>
			</tr>
			<tr>
				<td class="coord">4</td>
				<td> <canvas id="sq-a4" class="square-white"></canvas> </td>
				<td> <canvas id="sq-b4" class="square-black"></canvas> </td>
				<td> <canvas id="sq-c4" class="square-white"></canvas> </td>
				<td> <canvas id="sq-d4" class="square-black"></canvas> </td>
				<td> <canvas id="sq-e4" class="square-white"></canvas> </td>
				<td> <canvas id="sq-f4" class="square-black"></canvas> </td>
				<td> <canvas id="sq-g4" class="square-white"></canvas> </td>
				<td> <canvas id="sq-h4" class="square-black"></canvas> </td>
				<td class="coord">4</td>
			</tr>
			<tr>
				<td class="coord">3</td>
				<td> <canvas id="sq-a3" class="square-black"></canvas> </td>
				<td> <canvas id="sq-b3" class="square-white"></canvas> </td>
				<td> <canvas id="sq-c3" class="square-black"></canvas> </td>
				<td> <canvas id="sq-d3" class="square-white"></canvas> </td>
				<td> <canvas id="sq-e3" class="square-black"></canvas> </td>
				<td> <canvas id="sq-f3" class="square-white"></canvas> </td>
				<td> <canvas id="sq-g3" class="square-black"></canvas> </td>
				<td> <canvas id="sq-h3" class="square-white"></canvas> </td>
				<td class="coord">3</td>
			</tr>
			<tr>
				<td class="coord">2</td>
				<td> <canvas id="sq-a2" class="square-white"></canvas> </td>
				<td> <canvas id="sq-b2" class="square-black"></canvas> </td>
				<td> <canvas id="sq-c2" class="square-white"></canvas> </td>
				<td> <canvas id="sq-d2" class="square-black"></canvas> </td>
				<td> <canvas id="sq-e2" class="square-white"></canvas> </td>
				<td> <canvas id="sq-f2" class="square-black"></canvas> </td>
				<td> <canvas id="sq-g2" class="square-white"></canvas> </td>
				<td> <canvas id="sq-h2" class="square-black"></canvas> </td>
				<td class="coord">2</td>
			</tr>
			<tr>
				<td class="coord">1</td>
				<td> <canvas id="sq-a1" class="square-black"></canvas> </td>
				<td> <canvas id="sq-b1" class="square-white"></canvas> </td>
				<td> <canvas id="sq-c1" class="square-black"></canvas> </td>
				<td> <canvas id="sq-d1" class="square-white"></canvas> </td>
				<td> <canvas id="sq-e1" class="square-black"></canvas> </td>
				<td> <canvas id="sq-f1" class="square-white"></canvas> </td>
				<td> <canvas id="sq-g1" class="square-black"></canvas> </td>
				<td> <canvas id="sq-h1" class="square-white"></canvas> </td>
				<td class="coord">1</td>
			</tr>
			<tr>
				<td class="coord"></td>
				<td class="coord">a</td>
				<td class="coord">b</td>
				<td class="coord">c</td>
				<td class="coord">d</td>
				<td class="coord">e</td>
				<td class="coord">f</td>
				<td class="coord">g</td>
				<td class="coord">h</td>
				<td class="coord"></td>
			</tr>
		</table>
		<br>
			<button id="capitulate_btn" class="btn btn-default">Undo</button>
			<button id="castle_left_btn" class="btn btn-default">Left castle</button>
			<button id="castle_right_btn" class="btn btn-default">Right castle</button>
	</div>
	<script>


		// Add right-click and drag functionality for creating arrows
		let isDragging = false;
		let startCell = null;
		let arrowElement = null;

		document.querySelectorAll('.chessboard td').forEach(cell => {
			cell.addEventListener('contextmenu', (e) => {
				e.preventDefault(); // Prevent default right-click menu
				startCell = cell;
				isDragging = true;
				
				// Create arrow element
				arrowElement = document.createElement('div');
				arrowElement.className = 'arrow';
				arrowElement.style.position = 'absolute';
				arrowElement.style.zIndex = '1000';
				document.body.appendChild(arrowElement);
				
				updateArrow(e);
			});
		});

		document.addEventListener('mousemove', (e) => {
			if (isDragging) {
				updateArrow(e);
			}
		});

		document.addEventListener('mouseup', (e) => {
			if (isDragging) {
				isDragging = false;
				if (arrowElement) {
					arrowElement.remove();
				}
			}
		});

		function updateArrow(e) {
			if (!startCell || !arrowElement) return;

			const startRect = startCell.getBoundingClientRect();
			const startX = startRect.left + startRect.width / 2;
			const startY = startRect.top + startRect.height / 2;

			const endX = e.clientX;
			const endY = e.clientY;

			const angle = Math.atan2(endY - startY, endX - startX);
			const length = Math.sqrt(Math.pow(endX - startX, 2) + Math.pow(endY - startY, 2));

			arrowElement.style.left = `${startX}px`;
			arrowElement.style.top = `${startY}px`;
			arrowElement.style.width = `${length}px`;
			arrowElement.style.transform = `rotate(${angle}rad)`;
		}

		// Add CSS for the arrow
		const style = document.createElement('style');
		style.textContent = `
			.arrow {
				height: 2px;
				background-color: var(--somevar);
				transform-origin: left center;
			}
			.arrow::after {
				content: '';
				position: absolute;
				right: -5px;
				top: -4px;
				width: 0;
				height: 0;
				border-left: 10px solid var(--somevar);
				border-top: 5px solid transparent;
				border-bottom: 5px solid transparent;
			}
		`;
		document.head.appendChild(style);




		// Add hover effect to canvas elements
		const messageElement = document.querySelector('.lead.centered.somevarclass');
		const originalMessage = messageElement.textContent;

		document.querySelectorAll('.chessboard canvas').forEach(canvas => {
			canvas.addEventListener('mouseover', (e) => {
				const square = e.target.id.slice(3);
				const probability = prev_chessboard.squares[square] ? prev_chessboard.squares[square].probability : 0;
				messageElement.textContent = `Hovering over square: ${square}, Probability: ${probability}`;
			});

			canvas.addEventListener('mouseout', () => {
				messageElement.textContent = originalMessage;
			});
		});



		var wasmSupported = typeof WebAssembly === 'object' && WebAssembly.validate(Uint8Array.of(0x0, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00));

		var stockfish = new Worker(wasmSupported ? '@Model.Prefix/content/stockfish.wasm.js' : '@Model.Prefix/content/stockfish.js');

		stockfish.addEventListener('message', function (e) {
			console.log(e.data);
		});

		console.log(stockfish.postMessage('uci'))

		// Function to convert chessboard state to FEN notation
		function boardToFen() {
			if (!prev_chessboard || !prev_chessboard.squares) return 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'; // Default starting position

			let fen = '';
			let emptyCount = 0;

			for (let rank = 8; rank >= 1; rank--) {
				for (let file of 'abcdefgh') {
					let square = prev_chessboard.squares[file + rank];
					if (square && square.piece) {
						if (emptyCount > 0) {
							fen += emptyCount;
							emptyCount = 0;
						}
						let pieceChar = square.piece[0].toUpperCase();
						fen += (square.player === 'white') ? pieceChar : pieceChar.toLowerCase();
					} else {
						emptyCount++;
					}
				}
				if (emptyCount > 0) {
					fen += emptyCount;
					emptyCount = 0;
				}
				if (rank > 1) fen += '/';
			}

			fen += ` ${active_player[0]} - - 0 1`; // Simplified, assuming no castling rights or en passant
			return fen;
		}

		// Function to analyze the current position
		function analyzePosition() {
			let fen = boardToFen();
			stockfish.postMessage('position fen ' + fen);
			stockfish.postMessage('go depth 15');
		}

		// Analyze position only when the position changes
		let originalUpdateChessboard = update_chessboard;
		let previousFen = '';
		let highlightTimeout = null;

		update_chessboard = function() {
			originalUpdateChessboard();
			let currentFen = boardToFen();
			if (currentFen !== previousFen) {
				analyzePosition();
				previousFen = currentFen;
				clearHighlight();
			}
		};

		// Function to clear highlight
		function clearHighlight() {
			document.querySelectorAll('.chessboard td canvas').forEach(canvas => {
				canvas.classList.remove('square-dumb-move');
			});
		}

		// Listen for Stockfish analysis results
		stockfish.addEventListener('message', function(e) {
			let message = e.data;
			if (typeof message === 'string') {
				if (message.startsWith('info depth') && message.includes('score cp')) {
					let score = parseInt(message.split('score cp ')[1]);
					let evaluation = (score / 100).toFixed(2);
					document.getElementById('stockfish-eval').textContent = `Evaluation: ${evaluation}`;
				} else if (message.startsWith('bestmove')) {
					let bestMove = message.split(' ')[1];
					document.getElementById('stockfish-best-move').textContent = `Best move: ${bestMove}`;
					// Highlight the best move on the board
					const fromSquare = bestMove.substring(0, 2);
					const toSquare = bestMove.substring(2, 4);
					document.getElementById(`sq-${fromSquare}`).classList.add('square-dumb-move');
					document.getElementById(`sq-${toSquare}`).classList.add('square-dumb-move');
				}
			}
		});

		// Add Stockfish evaluation display elements
		let evalDiv = document.createElement('div');
		evalDiv.innerHTML = `
			<div hidden id="stockfish-eval">Evaluation: 0.00</div>
			<div hidden id="stockfish-best-move">Best move: -</div>
		`;
		document.querySelector('.chessboard-container').appendChild(evalDiv);



	</script>
@EndSection
